spring.application.name=study-resiliency-patterns
server.port=2025

# Resiliency Patterns: client/consumer --> server/provider
# 1. Retry: client/consumer
resilience4j.retry.instances.integrationService.max-attempts=5
resilience4j.retry.instances.integrationService.wait-duration=1s
resilience4j.retry.instances.integrationService.retry-exceptions=java.lang.Throwable
resilience4j.retry.instances.integrationService.enable-exponential-backoff=true
resilience4j.retry.instances.integrationService.exponential-backoff-multiplier=2
# 2. Rate Limiter: client/consumer
resilience4j.ratelimiter.instances.integrationService.limit-for-period=20
resilience4j.ratelimiter.instances.integrationService.limit-refresh-period=5s
resilience4j.ratelimiter.instances.integrationService.timeout-duration=10s
resilience4j.ratelimiter.instances.integrationService.event-consumer-buffer-size=10
# 3. Time Limiter: all
resilience4j.timelimiter.instances.integrationService.timeout-duration=2s
# 4. Circuit Breaker: client/consumer
# closed state --> open state
resilience4j.circuitbreaker.instances.fun.failure-rate-threshold=20
# open state -- after 3 seconds -> half-open state 
resilience4j.circuitbreaker.instances.fun.wait-duration-in-open-state=3s
# half-open state --> open state 
resilience4j.circuitbreaker.instances.fun.max-wait-duration-in-half-open-state=5s
# half-open state --> closed state 
resilience4j.circuitbreaker.instances.fun.permitted-number-of-calls-in-half-open-state=10
resilience4j.circuitbreaker.instances.fun.minimum-number-of-calls=8
# 5. Bulkhead: server/provider
resilience4j.bulkhead.instances.run.max-concurrent-calls=40
resilience4j.bulkhead.instances.run.event-consumer-buffer-size=100
resilience4j.bulkhead.instances.run.max-wait-duration=10s